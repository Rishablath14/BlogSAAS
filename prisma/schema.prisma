// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @unique
  email        String
  firstName    String
  lastName     String
  profileImage String
  role         Role          @default(READER)
  createdAt    DateTime      @default(now())
  Channel      Channel[]
  posts        Post[]
  customerId   String        @unique
  Subscription Subscription?
  editorIn     Channel[]     @relation("ChannelEditors") // Multiple channels where the user is an editor
  Comment      Comment[]
}

model Channel {
  id           String   @id @default(uuid())
  name         String
  description  String
  subdirectory String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  imageUrl     String?
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?
  editors      User[]   @relation("ChannelEditors")
  posts        Post[]
}

model Category {
  id    String  @id @default(uuid())
  slug  String  @unique
  title String
  img   String?
  Posts Post[]
}

model Post {
  id               String    @id @default(uuid())
  title            String
  articleContent   Json
  smallDescription String
  image            String
  slug             String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  User             User?     @relation(fields: [userId], references: [id])
  userId           String?
  Channel          Channel?  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId        String?
  views            Int       @default(0)
  catSlug          String
  cat              Category  @relation(fields: [catSlug], references: [slug])
  comments         Comment[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  User                 User     @relation(fields: [userId], references: [id])
  userId               String   @unique
}

enum Role {
  READER
  AUTHOR
  EDITOR
}
